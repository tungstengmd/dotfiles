autoload cd

# Non-destructively initialize global parameters for directory stack.
# Default stack size is 32, or $CDSTACK if set before init.
integer _push_max=${_push_max:-${CDSTACK:-32}}
integer _push_top=${_push_top:-${CDSTACK:-32}}
typeset -a _push_stack

# Menu driven change directory command
function mcd
{
	typeset dir=${PWD#"$HOME/"} PS3='Select by number or enter a name: '
	# display $HOME as ~
	case $dir in
	"$HOME")dir=\~ ;;
	/*)	;;
	*)	dir=\~/$dir ;;
	esac
	select dir in "$dir" "${_push_stack[@]}"
	do	# change ~ back to $HOME
		case $REPLY in
		\~*)	REPLY=$HOME${REPLY#\~} ;;
		esac
		# change directory using autoloaded cd wrapper function;
		# if it fails, redisplay menu
		cd "$REPLY" && return
	done
}

typeset -a _push_stack

function dirs
{
	typeset dir=${PWD#"$HOME/"} PS3=''
	# change $HOME to ~
	case $dir in
	"$HOME")dir=\~ ;;
	/*)	;;
	*) 	dir=\~/$dir ;;
	esac
	# Display numbered directory list using a dummy 'select' loop;
	# redirecting standard input to /dev/null prevents user input
	# and setting PS3 to empty (above) prevents showing a prompt.
	# The numbers shown are usable with 'mcd' and the 'cd' wrapper.
	select i in "$dir" "${_push_stack[@]}"
	do	:
	done < /dev/null
	# The select loop will exit with status 1 as there is no input
	# to read, but 'dirs' should not pass down that exit status.
	return 0
}

integer _push_max=${_push_max:-${CDSTACK:-32}}
integer _push_top=${_push_top:-${CDSTACK:-32}}
typeset -a _push_stack

# Pops the top directory
function popd
{
	typeset dir
	if	((_push_top >= _push_max))
	then	print -u2 "$0: Nothing to pop."
		return 1
	fi
	case $1 in
	"")	dir=${_push_stack[_push_top]}
		# change ~ to $HOME
		case $dir in
		\~*)   dir=$HOME${dir#\~} ;;
		esac
		\command cd -- "$dir" || return
		;;
	+[1-9]|+[1-9][0-9])
		typeset savedir
		integer i=_push_top$1-1
		if	((i >= _push_max))
		then	print -u2 "$0: Directory stack not that deep."
			return 1
		fi
		while ((i > _push_top))
		do	_push_stack[i]=${_push_stack[i-1]}
			i=i-1
		done
		;;
	*)	print -u2 "$0: Bad directory."
		return 1
		;;
	esac
	unset '_push_stack[_push_top]'
	_push_top=_push_top+1
	dirs
}

# Non-destructively initialize global parameters for directory stack.
# Default stack size is 32, or $CDSTACK if set before init.
integer _push_max=${_push_max:-${CDSTACK:-32}}
integer _push_top=${_push_top:-${CDSTACK:-32}}
typeset -a _push_stack

# Change directory and put directory on front of stack
function pushd
{
	typeset dir= type=0
	integer i
	case $1 in
	"")	# pushd
		if	((_push_top >= _push_max))
		then	print -u2 "$0: No other directory."
			return 1
		fi
		type=1
		dir=${_push_stack[_push_top]}
		;;
	+[1-9]|+[1-9][0-9])
		# pushd +n
		integer i=_push_top$1-1
		if	((i >= _push_max))
		then	print -u2 "$0: Directory stack not that deep."
			return 1
		fi
		type=2
		dir=${_push_stack[i]}
		;;
	*)	if	((_push_top <= 0))
		then	print -u2 "$0: Directory stack overflow."
			return 1
		fi
		;;
	esac
	# change ~ to $HOME
	case $dir in
	\~*)	dir=$HOME${dir#\~} ;;
	esac
	\command cd -- "${dir:-$1}" > /dev/null || return
	# change $HOME to ~
	dir=${OLDPWD#"$HOME/"}
	case $dir in
	"$HOME")dir=\~ ;;
	/*)	;;
	*)	dir=\~/$dir ;;
	esac
	case $type in
	0)	# pushd name
		_push_stack[_push_top=_push_top-1]=$dir
		;;
	1)	# pushd
		_push_stack[_push_top]=$dir
		;;
	2)	# push +n
		type=${1#+}
		i=_push_top-1
		set -- "${_push_stack[@]}" "$dir" "${_push_stack[@]}"
		shift "$type"
		for dir
		do	(((i=i+1) < _push_max)) || break
			_push_stack[i]=$dir
		done
		;;
	esac
	dirs
}

# Non-destructively initialize global parameters for directory stack.
# Default stack size is 32, or $CDSTACK if set before init.
integer _push_max=${_push_max:-${CDSTACK:-32}}
integer _push_top=${_push_top:-${CDSTACK:-32}}
typeset -a _push_stack

# Change directory and put directory on front of stack
function cd
{
	typeset dir=
	integer n=0 type=4
	case $1 in
	-|-1|2) # handle 'cd -'
		n=_push_top type=1
		set --
		;;
	-[1-9]*([0-9]))
		# handle 'cd -n'
		n=_push_top+${1#-}-1 type=2
		set --
		;;
	1)	# keep present directory
		print -r -- "$PWD"
		return
		;;
	[1-9]*([0-9]))
		# handle 'cd n'
		n=_push_top+${1}-2 type=2
		set --
		;;
	*) 	if	((_push_top <= 0))
		then	type=3
			n=_push_max
		fi
		;;
	esac
	if	((type<3))
	then	if	((n >= _push_max+1))
		then	print -u2 "$0: Directory stack not that deep."
			return 1
		else	dir=${_push_stack[n]}
		fi
	fi
	# change ~ to $HOME
	case $dir in
	\~*)	dir=$HOME${dir#\~} ;;
	esac
	# If there are no arguments, use $dir if non-empty.
	(($#)) || set -- ${dir:+"$dir"}
	# Call the cd built-in.
	\command cd "$@" >/dev/null || return
	# change $HOME to ~
	dir=${OLDPWD#"$HOME/"}
	case $dir in
	"$HOME")dir=\~ ;;
	/*)	;;
	*)	dir=\~/$dir ;;
	esac
	case $type in
	1)	# swap first two elements
		_push_stack[_push_top]=$dir
		;;
	2|3)	# put $dir on top and shift down by one until top
		integer i=_push_top
		for dir in "$dir" "${_push_stack[@]}"
		do	((i > n)) && break
			_push_stack[i]=$dir
			i=i+1
		done
		;;
	4)	# push name
		_push_stack[_push_top=_push_top-1]=$dir
		;;
	esac
	if	((type < 3))
	then	print -r -- "$PWD"
	fi
}
